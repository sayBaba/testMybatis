<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hzit.testMybatis.dao.StudentMapper" >

    <!-- 开启二级缓存 -->
    <cache/>

  <resultMap id="BaseResultMap" type="com.hzit.testMybatis.model.Student" >
    <id column="stu_id" property="stuId" jdbcType="INTEGER" />
    <result column="ope_id" property="opeId" jdbcType="INTEGER" />
    <result column="stu_no" property="stuNo" jdbcType="VARCHAR" />
    <result column="stu_name" property="stuName" jdbcType="VARCHAR" />
    <result column="stu_sex" property="stuSex" jdbcType="CHAR" />
    <result column="stu_birth" property="stuBirth" jdbcType="DATE" />
    <result column="stu_pic" property="stuPic" jdbcType="VARCHAR" />
    <result column="cla_id" property="claId" jdbcType="INTEGER" />
  </resultMap>

  <sql id="Base_Column_List" >
    stu_id, ope_id, stu_no, stu_name, stu_sex, stu_birth, stu_pic, cla_id
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
     WHERE 1 = 1 AND stu_birth <![CDATA[ <= ]]>  now() AND stu_birth <![CDATA[ >= ]]> now()


  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where stu_id = #{stuId,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.hzit.testMybatis.model.Student" >
    insert into student (stu_id, ope_id, stu_no, 
      stu_name, stu_sex, stu_birth, 
      stu_pic, cla_id)
    values (#{stuId,jdbcType=INTEGER}, #{opeId,jdbcType=INTEGER}, #{stuNo,jdbcType=VARCHAR}, 
      #{stuName,jdbcType=VARCHAR}, #{stuSex,jdbcType=CHAR}, #{stuBirth,jdbcType=DATE}, 
      #{stuPic,jdbcType=VARCHAR}, #{claId,jdbcType=INTEGER})
  </insert>

  <insert id="insertSelective" parameterType="com.hzit.testMybatis.model.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="stuId != null" >
        stu_id,
      </if>
      <if test="opeId != null" >
        ope_id,
      </if>
      <if test="stuNo != null" >
        stu_no,
      </if>
      <if test="stuName != null" >
        stu_name,
      </if>
      <if test="stuSex != null" >
        stu_sex,
      </if>
      <if test="stuBirth != null" >
        stu_birth,
      </if>
      <if test="stuPic != null" >
        stu_pic,
      </if>
      <if test="claId != null" >
        cla_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="stuId != null" >
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="opeId != null" >
        #{opeId,jdbcType=INTEGER},
      </if>
      <if test="stuNo != null" >
        #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null" >
        #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="stuSex != null" >
        #{stuSex,jdbcType=CHAR},
      </if>
      <if test="stuBirth != null" >
        #{stuBirth,jdbcType=DATE},
      </if>
      <if test="stuPic != null" >
        #{stuPic,jdbcType=VARCHAR},
      </if>
      <if test="claId != null" >
        #{claId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>


  <update id="updateByPrimaryKeySelective" parameterType="com.hzit.testMybatis.model.Student" >
    update student
    <set >
      <if test="opeId != null" >
        ope_id = #{opeId,jdbcType=INTEGER},
      </if>
      <if test="stuNo != null" >
        stu_no = #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null" >
        stu_name = #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="stuSex != null" >
        stu_sex = #{stuSex,jdbcType=CHAR},
      </if>
      <if test="stuBirth != null" >
        stu_birth = #{stuBirth,jdbcType=DATE},
      </if>
      <if test="stuPic != null" >
        stu_pic = #{stuPic,jdbcType=VARCHAR},
      </if>
      <if test="claId != null" >
        cla_id = #{claId,jdbcType=INTEGER},
      </if>
    </set>
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.hzit.testMybatis.model.Student" >
    update student
    set ope_id = #{opeId,jdbcType=INTEGER},
      stu_no = #{stuNo,jdbcType=VARCHAR},
      stu_name = #{stuName,jdbcType=VARCHAR},
      stu_sex = #{stuSex,jdbcType=CHAR},
      stu_birth = #{stuBirth,jdbcType=DATE},
      stu_pic = #{stuPic,jdbcType=VARCHAR},
      cla_id = #{claId,jdbcType=INTEGER}
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>


    <!-- 根据姓名和性别查询学生信息 -->
    <select id="queryByNameAndSex" resultMap="BaseResultMap" parameterType="com.hzit.testMybatis.model.Student">

    select
        <include refid="Base_Column_List" />
     from student
     where stu_name = #{stuName,jdbcType=VARCHAR}
     and    stu_sex = #{stuSex,jdbcType=CHAR}

    </select>


    <select id="queryByNameAndSex1" resultMap="BaseResultMap" parameterType="java.lang.String">

        select
        <include refid="Base_Column_List" />
        from student
        where stu_name = #{stuName,jdbcType=VARCHAR}
        and    stu_sex = #{stuSex,jdbcType=CHAR}
    </select>


    <select id="countStudentNum" resultType="java.lang.Integer">
        select count(1) from student
    </select>


    <!-- 查询男性用户，如果输入了姓名，则按姓名查询-->
    <select id="queryMStudent" parameterType="java.lang.String" resultMap="BaseResultMap">

        select  <include refid="Base_Column_List" />
        from student  where stu_sex = '男'
        <if test="name != null and name.trim()!='' " >
            and stu_name = #{name,jdbcType=VARCHAR}
        </if>
    </select>


    <!-- -->
    
    <select id="queryUserByNameorAge" parameterType="java.lang.String" resultMap="BaseResultMap">

        select  <include refid="Base_Column_List" />
        from student  where stu_sex = '男'
        <choose>
            <when test="name !=null">
            <!--$  # -->

              and stu_name like '%${name}%'
            </when>

            <when test="stuNo !=null">
                and stu_no = #{stuNo,jdbcType=VARCHAR}
            </when>

            <otherwise>
                and stu_name = '周建国'
            </otherwise>

        </choose>


    </select>


    <!-- -->
    <select id="queryUserListByNameAndStuNo" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from student
        <where>
            <if test="name !=null">
                and stu_name like '%${name}%'
            </if>

            <if test="stuNo !=null">
                and stu_no = #{stuNo,jdbcType=VARCHAR}
            </if>

        </where>


    </select>


    <update id="updateStudentByStuId" parameterType="java.lang.String">
        update student
        <set>
            <if test="name !=null">

                stu_name =  #{name,jdbcType=VARCHAR}
            </if>

            <if test="stuNo !=null">
                where stu_no = #{stuNo,jdbcType=VARCHAR}
            </if>


        </set>

    </update>



    <!--根据stuNo的数组，批量查询-->
    <select id="queryByArray" resultMap="BaseResultMap" parameterType="java.lang.String">

        select
        <include refid="Base_Column_List" />
        from student where stu_no in
        <!--                   数组         数组元素变量        分      -->
        <foreach collection="stuNos"  item="stuNo" separator="," open="(" close=")">
            #{stuNo}
        </foreach>

    </select>


    <!--批量插入 -->
    <insert id="insertStudentList" parameterType="java.util.List">

        insert into student (stu_id, ope_id, stu_no,
            stu_name, stu_sex, stu_birth,
            stu_pic, cla_id)
        values
        <foreach collection="studentList" item="item" index="index" separator="," >
           ( #{item.stuId,jdbcType=INTEGER},
            #{item.opeId,jdbcType=INTEGER},
            #{item.stuNo,jdbcType=VARCHAR},
            #{item.stuName,jdbcType=VARCHAR},
            #{item.stuSex,jdbcType=CHAR},
            #{item.stuBirth,jdbcType=DATE},
            #{item.stuPic,jdbcType=VARCHAR},
            #{item.claId,jdbcType=INTEGER}
            )
        </foreach>


    </insert>



</mapper>